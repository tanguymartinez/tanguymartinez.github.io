{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ICOS ATC documentation This documentation is split into two parts: The datavisualization module - link - WIP Panelboard module - link - TODO","title":"Home"},{"location":"#icos-atc-documentation","text":"This documentation is split into two parts: The datavisualization module - link - WIP Panelboard module - link - TODO","title":"ICOS ATC documentation"},{"location":"dtvs1/","text":"Introduction The goal of the datavisualization module is to display data from the release alongside NRT data. The data comes from the Carbon Portal . In order to do so, it was decided that the Highcharts.js library would be used. The global workflow is the following: Data-server's side Step 1 The first step is to process the release file using the release.py script. The job of this script is twofold: Create nested folders to reflect the files of the release (located in the data folder), which are in turn populated with the JSON-converted release files Generate a list of commands to be run by cron periodically ( nrt.sh ), which job is to run the nrt extraction Step 2 The second step is to run the nrt extraction and convert the result into web-processable data in the form of JSON. The nrt extraction is simply done by running the generated nrt.sh file. It runs a command for each entry in the release file (making use of the nrt.py file to convert the csv files into JSON ones). The resulting data lives in the data folder. Eventually, an index file listing the different files available is created with the map_tree.py (the folder tree is mapped). The resulting file is index.json located in the data folder (at root level). Result At this point, the data is available and in the correct folders. Moreover, the index.json file lists the available paths. It is now up to the web server to fetch and parse this file in order to be able to request sepecific data files. Web-server's side The web server's data folder is an NFS mount point. It comes from the data server. The datavisualization JavaScript module proceeds as follow: Fetch the index.json file Process the file Render the interface using the processed file On \"get data\" click: Get the data link Fetch the file Add the result to the chart","title":"Introduction"},{"location":"dtvs1/#introduction","text":"The goal of the datavisualization module is to display data from the release alongside NRT data. The data comes from the Carbon Portal . In order to do so, it was decided that the Highcharts.js library would be used. The global workflow is the following:","title":"Introduction"},{"location":"dtvs1/#data-servers-side","text":"","title":"Data-server's side"},{"location":"dtvs1/#step-1","text":"The first step is to process the release file using the release.py script. The job of this script is twofold: Create nested folders to reflect the files of the release (located in the data folder), which are in turn populated with the JSON-converted release files Generate a list of commands to be run by cron periodically ( nrt.sh ), which job is to run the nrt extraction","title":"Step 1"},{"location":"dtvs1/#step-2","text":"The second step is to run the nrt extraction and convert the result into web-processable data in the form of JSON. The nrt extraction is simply done by running the generated nrt.sh file. It runs a command for each entry in the release file (making use of the nrt.py file to convert the csv files into JSON ones). The resulting data lives in the data folder. Eventually, an index file listing the different files available is created with the map_tree.py (the folder tree is mapped). The resulting file is index.json located in the data folder (at root level).","title":"Step 2"},{"location":"dtvs1/#result","text":"At this point, the data is available and in the correct folders. Moreover, the index.json file lists the available paths. It is now up to the web server to fetch and parse this file in order to be able to request sepecific data files.","title":"Result"},{"location":"dtvs1/#web-servers-side","text":"The web server's data folder is an NFS mount point. It comes from the data server. The datavisualization JavaScript module proceeds as follow: Fetch the index.json file Process the file Render the interface using the processed file On \"get data\" click: Get the data link Fetch the file Add the result to the chart","title":"Web-server's side"},{"location":"dtvs2/","text":"Installation Data extraction toolchain To install the toolchain, you have to manually run the following command once: python3 release.py release.zip tmp_csv_folder/ data/ nrt.sh nrt.py Where path have been stripped for clarity. Here: release.py is the main entry point script. release.zip is the release file containing csv files. tmp_csv_folder is a folder used to extract the .zip file. It is temporary and should be empty before reunning the command. data is the output folder. It will contain the data as JSON files alongside the index.json file. nrt.sh is the output script containing the NRT extraction commands. It will be installed at a later time using cron jobs. nrt.py is the script converting the extracted NRT data to JSON. You should use absolute paths. Here is an example of a working command: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/release.py /home/users/nrt_user/ICOS/data/NRT/ICOS_ATC_L2_L2-2019.1.zip /home/users/nrt_user/ICOS/data/NRT/release_csv/ /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.sh /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.py Once you have initialized the toolchain with the above command, you can either run the following command manually or install it in a cron job: python3 map_tree.py data/ data/index.json Same as before, the paths have been stripped for the sake of understanding however, they should come as absolute paths. Here is an example of a working command below: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/map_tree.py /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/data/NRT/data/index.json JavaScript datavisualization module When everything is in place, you can go ahead and install the JavaScript module. What we did was to create a root-level directory in the Drupal folder containing the module files. That way, we could create an iframe integrated in a Drupal basic page (via the source button). The index.php file of the module receives a trigram as a GET parameter and injects it in a <script> tag. It is in turn used in the main script to fetch the available data index.","title":"Installation"},{"location":"dtvs2/#installation","text":"","title":"Installation"},{"location":"dtvs2/#data-extraction-toolchain","text":"To install the toolchain, you have to manually run the following command once: python3 release.py release.zip tmp_csv_folder/ data/ nrt.sh nrt.py Where path have been stripped for clarity. Here: release.py is the main entry point script. release.zip is the release file containing csv files. tmp_csv_folder is a folder used to extract the .zip file. It is temporary and should be empty before reunning the command. data is the output folder. It will contain the data as JSON files alongside the index.json file. nrt.sh is the output script containing the NRT extraction commands. It will be installed at a later time using cron jobs. nrt.py is the script converting the extracted NRT data to JSON. You should use absolute paths. Here is an example of a working command: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/release.py /home/users/nrt_user/ICOS/data/NRT/ICOS_ATC_L2_L2-2019.1.zip /home/users/nrt_user/ICOS/data/NRT/release_csv/ /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.sh /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.py Once you have initialized the toolchain with the above command, you can either run the following command manually or install it in a cron job: python3 map_tree.py data/ data/index.json Same as before, the paths have been stripped for the sake of understanding however, they should come as absolute paths. Here is an example of a working command below: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/map_tree.py /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/data/NRT/data/index.json","title":"Data extraction toolchain"},{"location":"dtvs2/#javascript-datavisualization-module","text":"When everything is in place, you can go ahead and install the JavaScript module. What we did was to create a root-level directory in the Drupal folder containing the module files. That way, we could create an iframe integrated in a Drupal basic page (via the source button). The index.php file of the module receives a trigram as a GET parameter and injects it in a <script> tag. It is in turn used in the main script to fetch the available data index.","title":"JavaScript datavisualization module"},{"location":"dtvs3/","text":"Datavisualization module Intro The JavaScript module's role is to fetch and display data as Highchart instances. The JavaScript code documentation is available on the left menu under \"JavaScript module documentation\" . However, the processes involved are described here. The module consists of several files: Injector.js : A simple dependency injection module FileManager.js : The module responsible for data fetching, storing and processing Controller.js : The interface between the Controller and the InterfaceManager InterfaceManager.js : Manages the interface and most notably the GraphManager instances GraphManager.js : Handles a single chart (mostly Highchart specific code) Sparql.js : The module for fetching the series' links index.php : The main PHP file index.css : The module stylesheet index.js : The JavaScript entry point highcharts.js : The Highcharts library boost.js : An Highcharts addon to boost performances Description The entry point of the JavaScript module is index.js . Its role is to bootstrap the application. The modules are instanciated and eventually the Controller is rendered, in turn triggering the fetching of the index file by the FileManger module. The FileManager fetches the JSON index file and proceeds to parse it (upon the loadIndex function call). It will then be able to request data at a given URL and store the result in an array. Data fetching A linking step is executed before anytihng. The linkage happens in the Controller when it prepares the data for the interface (specifically in the buildInterfaceTree method). An identifier is created, bound to a specific link in the FileManager and eventually stored in the corresponding entry of said data. When the interface is being initialized, each option of the interface is associated with the identifier we just mentioned. This way, when a series is requested, when just have to pass the identifier to the FileManager 's retrieve method and wait for data to be returned. Chart management Chart management is done in the InterfaceManager module which contains a list of charts. The crosshairs are synchronized in the initialize method by overriding the default mousemove, touchmove and touchstart events. The zoom is also synchronized through the syncExtremes function. The rest of the customizations are contained within the properties of the chart itself. The bottom legend of each graph is updated when you zoom (see the selection event). For instance, if the graph is zoomed out, only years will show. If it is zoomed in at the maximum level, the day and the hour will show. Series' links The links displayed when you load a series are queried against the ICOS Data Sparql endpoint ( API endpoint , browser-based version ) by the Sparql module.","title":"JavaScript"},{"location":"dtvs3/#datavisualization-module","text":"","title":"Datavisualization module"},{"location":"dtvs3/#intro","text":"The JavaScript module's role is to fetch and display data as Highchart instances. The JavaScript code documentation is available on the left menu under \"JavaScript module documentation\" . However, the processes involved are described here. The module consists of several files: Injector.js : A simple dependency injection module FileManager.js : The module responsible for data fetching, storing and processing Controller.js : The interface between the Controller and the InterfaceManager InterfaceManager.js : Manages the interface and most notably the GraphManager instances GraphManager.js : Handles a single chart (mostly Highchart specific code) Sparql.js : The module for fetching the series' links index.php : The main PHP file index.css : The module stylesheet index.js : The JavaScript entry point highcharts.js : The Highcharts library boost.js : An Highcharts addon to boost performances","title":"Intro"},{"location":"dtvs3/#description","text":"The entry point of the JavaScript module is index.js . Its role is to bootstrap the application. The modules are instanciated and eventually the Controller is rendered, in turn triggering the fetching of the index file by the FileManger module. The FileManager fetches the JSON index file and proceeds to parse it (upon the loadIndex function call). It will then be able to request data at a given URL and store the result in an array.","title":"Description"},{"location":"dtvs3/#data-fetching","text":"A linking step is executed before anytihng. The linkage happens in the Controller when it prepares the data for the interface (specifically in the buildInterfaceTree method). An identifier is created, bound to a specific link in the FileManager and eventually stored in the corresponding entry of said data. When the interface is being initialized, each option of the interface is associated with the identifier we just mentioned. This way, when a series is requested, when just have to pass the identifier to the FileManager 's retrieve method and wait for data to be returned.","title":"Data fetching"},{"location":"dtvs3/#chart-management","text":"Chart management is done in the InterfaceManager module which contains a list of charts. The crosshairs are synchronized in the initialize method by overriding the default mousemove, touchmove and touchstart events. The zoom is also synchronized through the syncExtremes function. The rest of the customizations are contained within the properties of the chart itself. The bottom legend of each graph is updated when you zoom (see the selection event). For instance, if the graph is zoomed out, only years will show. If it is zoomed in at the maximum level, the day and the hour will show.","title":"Chart management"},{"location":"dtvs3/#series-links","text":"The links displayed when you load a series are queried against the ICOS Data Sparql endpoint ( API endpoint , browser-based version ) by the Sparql module.","title":"Series' links"},{"location":"dtvs4/","text":"Datavisualization module Intro The Python module processes the initial release zip file. It uses the extracted data to: Generate the correct file tree to store the JSON files Store the JSON-converted extracted CSV files at the correct location in the file tree Build a shell script which extracts NRT data and then converts it to JSON (cleaning the residual CSV files) Create a JSON index file to be used by the JavaScript module It consists of the following files: extract_utils.py : a utility to parse a CSV extracted file map_tree.py : maps the file tree and outputs a JSON index file nrt.py : the script converting the extracted NRT data to JSON release.py : the main entry point script utils.py : helpers (not used currently)","title":"Python"},{"location":"dtvs4/#datavisualization-module","text":"","title":"Datavisualization module"},{"location":"dtvs4/#intro","text":"The Python module processes the initial release zip file. It uses the extracted data to: Generate the correct file tree to store the JSON files Store the JSON-converted extracted CSV files at the correct location in the file tree Build a shell script which extracts NRT data and then converts it to JSON (cleaning the residual CSV files) Create a JSON index file to be used by the JavaScript module It consists of the following files: extract_utils.py : a utility to parse a CSV extracted file map_tree.py : maps the file tree and outputs a JSON index file nrt.py : the script converting the extracted NRT data to JSON release.py : the main entry point script utils.py : helpers (not used currently)","title":"Intro"},{"location":"pbmodule/","text":"Panelboard module The module is located at web/modules/panel_board . The two important files are panel_board.module and js/generate-html.js . The panel_board_form_alter method from the panel_board.module file attaches a custom library (which consists of js/generate-html.js ) only when we are on a tab form. js/generate-html.js can the generate the HTML markup based on user input.","title":"Panelboard module"},{"location":"pbmodule/#panelboard-module","text":"The module is located at web/modules/panel_board . The two important files are panel_board.module and js/generate-html.js . The panel_board_form_alter method from the panel_board.module file attaches a custom library (which consists of js/generate-html.js ) only when we are on a tab form. js/generate-html.js can the generate the HTML markup based on user input.","title":"Panelboard module"},{"location":"people/","text":"People The people page ( /people ) is displayed using a basic page as foundation and view blocks on top thereof. The view reponsible for these blocks is \"People\" ( people ). It is composed of two displays, which only differ in their respective filter criteria. You can duplicate one and change the filter to adapt to new categories. To add new people, head to the content section and click \"add new\". From there, you should be able to add an employee.","title":"People"},{"location":"people/#people","text":"The people page ( /people ) is displayed using a basic page as foundation and view blocks on top thereof. The view reponsible for these blocks is \"People\" ( people ). It is composed of two displays, which only differ in their respective filter criteria. You can duplicate one and change the filter to adapt to new categories. To add new people, head to the content section and click \"add new\". From there, you should be able to add an employee.","title":"People"},{"location":"pnb1/","text":"Panelboards That piece of documentation is about the panelboards (which you can access from the map or by manually entering the URL [root]/panelboard/[TRIGRAM] ). Here are the views I created so far: List instruments ( list_instruments ): entity reference to list instruments belonging to a station on a panelboard form List panel board tabs ( list_panel_board_tabs ): block listing the tabs on a panel board; entity reference to find tabs in the panel board form Panel Board ( panel_board ): the base page for the panel boards Panel Board Tab ( panel_board_tab ): individual tab blocks Panel Board Trigram Filter ( panel_board_trigram_filter ): used on the tab creation form to attach it to a panel board Structure Here is the panel board mockup: Management Adding a panelboard If you want to add a new panel board, click Content->Add new->Panel board . The longitude and latitude values will be used to pinpoint the station on a map. The description will be floating to the right of the map. The trigram must be unique and will be used for several purposes, including but not limited to: Finding the panel board from other forms such as the tabs The URL of the panelboard The datavisualization module The associated tabs will appear under the \"tabs\" title. You can check or uncheck them depending on whether or not you want each one displayed. To add tabs, see next section. The default tab is the one displayed when you first arrive on the panelboard. Adding tabs To add tabs, click Content->Add new->Tab ... . The fields just above the markup are used to generate the images' HTML. You can fill them and then edit the HTML by hand. However, please note that every time you change the fields generating the HTML, the markup will be replaced by the newly-generated HTML. This is merely a convenience tool. The weight field can be used to order the tabs: the lower the weight, the left-most the tab will be in the tabs list. The tab name field corresponds to the text displayed in the tabs list link. Once created, the tab will appear in the associated panelboard. Do not forget to tick the corresponding box from there or else it will not be displayed.","title":"Panelboards"},{"location":"pnb1/#panelboards","text":"That piece of documentation is about the panelboards (which you can access from the map or by manually entering the URL [root]/panelboard/[TRIGRAM] ). Here are the views I created so far: List instruments ( list_instruments ): entity reference to list instruments belonging to a station on a panelboard form List panel board tabs ( list_panel_board_tabs ): block listing the tabs on a panel board; entity reference to find tabs in the panel board form Panel Board ( panel_board ): the base page for the panel boards Panel Board Tab ( panel_board_tab ): individual tab blocks Panel Board Trigram Filter ( panel_board_trigram_filter ): used on the tab creation form to attach it to a panel board","title":"Panelboards"},{"location":"pnb1/#structure","text":"Here is the panel board mockup:","title":"Structure"},{"location":"pnb1/#management","text":"","title":"Management"},{"location":"pnb1/#adding-a-panelboard","text":"If you want to add a new panel board, click Content->Add new->Panel board . The longitude and latitude values will be used to pinpoint the station on a map. The description will be floating to the right of the map. The trigram must be unique and will be used for several purposes, including but not limited to: Finding the panel board from other forms such as the tabs The URL of the panelboard The datavisualization module The associated tabs will appear under the \"tabs\" title. You can check or uncheck them depending on whether or not you want each one displayed. To add tabs, see next section. The default tab is the one displayed when you first arrive on the panelboard.","title":"Adding a panelboard"},{"location":"pnb1/#adding-tabs","text":"To add tabs, click Content->Add new->Tab ... . The fields just above the markup are used to generate the images' HTML. You can fill them and then edit the HTML by hand. However, please note that every time you change the fields generating the HTML, the markup will be replaced by the newly-generated HTML. This is merely a convenience tool. The weight field can be used to order the tabs: the lower the weight, the left-most the tab will be in the tabs list. The tab name field corresponds to the text displayed in the tabs list link. Once created, the tab will appear in the associated panelboard. Do not forget to tick the corresponding box from there or else it will not be displayed.","title":"Adding tabs"}]}