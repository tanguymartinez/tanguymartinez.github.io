{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. ICOS ATC documentation This documentation is split into two parts: The datavisualization module - link Panelboard module - link Doc","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#icos-atc-documentation","text":"This documentation is split into two parts: The datavisualization module - link Panelboard module - link Doc","title":"ICOS ATC documentation"},{"location":"dtvs1/","text":"Introduction The goal of the datavisualization module is to display data from the release alongside NRT data. The data comes from the Carbon Portal . In order to do so, it was decided that the Highcharts.js library would be used. The global workflow is the following: Data-server's side Step 1 The first step is to process the release file using the release.py script. The job of this script is twofold: Create nested folders to reflect the files of the release (located in the data folder), which are in turn populated with the JSON-converted release files Generate a list of commands to be run by cron periodically ( nrt.sh ), which job is to run the nrt extraction Step 2 The second step is to run the nrt extraction and convert the result into web-processable data in the form of JSON. The nrt extraction is simply done by running the generated nrt.sh file. It runs a command for each entry in the release file (making use of the nrt.py file to convert the csv files into JSON ones). The resulting data lives in the data folder. Eventually, an index file listing the different files available is created with the map_tree.py (the folder tree is mapped). The resulting file is index.json located in the data folder (at root level). Result At this point, the data is available and in the correct folders. Moreover, the index.json file lists the available paths. It is now up to the web server to fetch and parse this file in order to be able to request sepecific data files. Web-server's side The web server's data folder is an NFS mount point. It comes from the data server. The datavisualization JavaScript module proceeds as follow: Fetch the index.json file Process the file Render the interface using the processed file On \"get data\" click: Get the data link Fetch the file Add the result to the chart","title":"Introduction"},{"location":"dtvs1/#introduction","text":"The goal of the datavisualization module is to display data from the release alongside NRT data. The data comes from the Carbon Portal . In order to do so, it was decided that the Highcharts.js library would be used. The global workflow is the following:","title":"Introduction"},{"location":"dtvs1/#data-servers-side","text":"","title":"Data-server's side"},{"location":"dtvs1/#step-1","text":"The first step is to process the release file using the release.py script. The job of this script is twofold: Create nested folders to reflect the files of the release (located in the data folder), which are in turn populated with the JSON-converted release files Generate a list of commands to be run by cron periodically ( nrt.sh ), which job is to run the nrt extraction","title":"Step 1"},{"location":"dtvs1/#step-2","text":"The second step is to run the nrt extraction and convert the result into web-processable data in the form of JSON. The nrt extraction is simply done by running the generated nrt.sh file. It runs a command for each entry in the release file (making use of the nrt.py file to convert the csv files into JSON ones). The resulting data lives in the data folder. Eventually, an index file listing the different files available is created with the map_tree.py (the folder tree is mapped). The resulting file is index.json located in the data folder (at root level).","title":"Step 2"},{"location":"dtvs1/#result","text":"At this point, the data is available and in the correct folders. Moreover, the index.json file lists the available paths. It is now up to the web server to fetch and parse this file in order to be able to request sepecific data files.","title":"Result"},{"location":"dtvs1/#web-servers-side","text":"The web server's data folder is an NFS mount point. It comes from the data server. The datavisualization JavaScript module proceeds as follow: Fetch the index.json file Process the file Render the interface using the processed file On \"get data\" click: Get the data link Fetch the file Add the result to the chart","title":"Web-server's side"},{"location":"dtvs2/","text":"Installation Data extraction toolchain To install the toolchain, you have to manually run the following command once: python3 release.py release.zip tmp_csv_folder/ data/ nrt.sh nrt.py Where path have been stripped for clarity. Here: release.py is the main entry point script. release.zip is the release file containing csv files. tmp_csv_folder is a folder used to extract the .zip file. It is temporary and should be empty before reunning the command. data is the output folder. It will contain the data as JSON files alongside the index.json file. nrt.sh is the output script containing the NRT extraction commands. It will be installed at a later time using cron jobs. nrt.py is the script converting the extracted NRT data to JSON. You should use absolute paths. Here is an example of a working command: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/release.py /home/users/nrt_user/ICOS/data/NRT/ICOS_ATC_L2_L2-2019.1.zip /home/users/nrt_user/ICOS/data/NRT/release_csv/ /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.sh /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.py Once you have initialized the toolchain with the above command, you can either run the following command manually or install it in a cron job: python3 map_tree.py data/ data/index.json Same as before, the paths have been stripped for the sake of understanding however, they should come as absolute paths. Here is an example of a working command below: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/map_tree.py /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/data/NRT/data/index.json JavaScript datavisualization module When everything is in place, you can go ahead and install the JavaScript module. What we did was to create a root-level directory in the Drupal folder containing the module files. That way, we could create an iframe integrated in a Drupal basic page (via the source button). The index.php file of the module receives a trigram as a GET parameter and injects it in a <script> tag. It is in turn used in the main script to fetch the available data index.","title":"Installation"},{"location":"dtvs2/#installation","text":"","title":"Installation"},{"location":"dtvs2/#data-extraction-toolchain","text":"To install the toolchain, you have to manually run the following command once: python3 release.py release.zip tmp_csv_folder/ data/ nrt.sh nrt.py Where path have been stripped for clarity. Here: release.py is the main entry point script. release.zip is the release file containing csv files. tmp_csv_folder is a folder used to extract the .zip file. It is temporary and should be empty before reunning the command. data is the output folder. It will contain the data as JSON files alongside the index.json file. nrt.sh is the output script containing the NRT extraction commands. It will be installed at a later time using cron jobs. nrt.py is the script converting the extracted NRT data to JSON. You should use absolute paths. Here is an example of a working command: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/release.py /home/users/nrt_user/ICOS/data/NRT/ICOS_ATC_L2_L2-2019.1.zip /home/users/nrt_user/ICOS/data/NRT/release_csv/ /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.sh /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/nrt.py Once you have initialized the toolchain with the above command, you can either run the following command manually or install it in a cron job: python3 map_tree.py data/ data/index.json Same as before, the paths have been stripped for the sake of understanding however, they should come as absolute paths. Here is an example of a working command below: /usr/bin/python3.6 /home/users/nrt_user/ICOS/prog/ICOS-ATC_scripts/map_tree.py /home/users/nrt_user/ICOS/data/NRT/data/ /home/users/nrt_user/ICOS/data/NRT/data/index.json","title":"Data extraction toolchain"},{"location":"dtvs2/#javascript-datavisualization-module","text":"When everything is in place, you can go ahead and install the JavaScript module. What we did was to create a root-level directory in the Drupal folder containing the module files. That way, we could create an iframe integrated in a Drupal basic page (via the source button). The index.php file of the module receives a trigram as a GET parameter and injects it in a <script> tag. It is in turn used in the main script to fetch the available data index.","title":"JavaScript datavisualization module"},{"location":"dtvs3/","text":"Datavisualization module Intro The JavaScript documentation is available on the left menu under \"JavaScript module documentation\" . However, the processes involved are described here. The modules consists of several files: Injector.js : A simple dependency injection module FileManager.js : The module responsible for data fetching, storing and processing Controller.js : The interface between the Controller and the InterfaceManager InterfaceManager.js : Manages the interface and most notably the GraphManager instances GraphManager.js : Handles a single chart (mostly HighChart specific code) Sparql.js : The module for fetching the series' links index.php : The main PHP file index.css : The module stylesheet index.js : The JavaScript entry point highcharts.js : The HighCharts library boost.js : An HighCharts addon to boost performances Description The entry point of the JavaScript module is index.js . Its role is to bootstrap the application. The modules are instanciated and eventually the Controller is rendered, in turn triggering the fetching of the index file by the FileManger module. The FileManager fetches the JSON index file and proceeds to parse it (upon the loadIndex function call). It will then be able to request data at a given URL and store the result in an array. In order to do so, a linking step is executed before anything. The linkage happens in the Controller when it prepares the data for the interface (specifically in the buildInterfaceTree method). An identifier is created, bound to a specific link in the FileManager and eventually stored in the corresponding entry of said data. When the interface is being initialized, each option of the interface is associated with the identifier we just mentioned. This way, when a series is requested, when just have to pass the identifier to the FileManager 's retrieve method and wait for data to be returned.","title":"JavaScript"},{"location":"dtvs3/#datavisualization-module","text":"","title":"Datavisualization module"},{"location":"dtvs3/#intro","text":"The JavaScript documentation is available on the left menu under \"JavaScript module documentation\" . However, the processes involved are described here. The modules consists of several files: Injector.js : A simple dependency injection module FileManager.js : The module responsible for data fetching, storing and processing Controller.js : The interface between the Controller and the InterfaceManager InterfaceManager.js : Manages the interface and most notably the GraphManager instances GraphManager.js : Handles a single chart (mostly HighChart specific code) Sparql.js : The module for fetching the series' links index.php : The main PHP file index.css : The module stylesheet index.js : The JavaScript entry point highcharts.js : The HighCharts library boost.js : An HighCharts addon to boost performances","title":"Intro"},{"location":"dtvs3/#description","text":"The entry point of the JavaScript module is index.js . Its role is to bootstrap the application. The modules are instanciated and eventually the Controller is rendered, in turn triggering the fetching of the index file by the FileManger module. The FileManager fetches the JSON index file and proceeds to parse it (upon the loadIndex function call). It will then be able to request data at a given URL and store the result in an array. In order to do so, a linking step is executed before anything. The linkage happens in the Controller when it prepares the data for the interface (specifically in the buildInterfaceTree method). An identifier is created, bound to a specific link in the FileManager and eventually stored in the corresponding entry of said data. When the interface is being initialized, each option of the interface is associated with the identifier we just mentioned. This way, when a series is requested, when just have to pass the identifier to the FileManager 's retrieve method and wait for data to be returned.","title":"Description"}]}